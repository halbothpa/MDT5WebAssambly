@page "/counter"
@using System; 
@using System.IO; 
@using System.Net;
<h1 style="font-size:30px;">Counter</h1>

<p>Current count: @currentCount</p>

<div>
    <label for="iAmount">Increment Amount:</label>
    <input id="iAmount" @bind="incrementAmount" placeholder="@incrementAmount" />
</div>
<div>
    <label for="tDuration">Task Duration (s):</label>
    <input id="tDuration" @bind="taskDurationInput" placeholder="@taskDurationInput" />
</div>
<div>
    <label for="tDelay">Task Loop Delay (ms):</label>
    <input id="tDelay" @bind="taskLoopDelayInput" placeholder="@taskLoopDelayInput" />
</div>

<br>
<span>
<button id="click_me" class="btn btn-primary" @onclick="IncrementCount">Click me</button>
</span>
<span>
@if (!isTaskRunning)
{
    <button id="run_task" class="btn btn-secondary" @onclick="StartTask">Run Task</button>
}
else
{
    <button id="cancel_task" class="btn btn-secondary" @onclick="CancelTask">Cancel</button>
}
</span>
@code {
    private bool isTaskRunning = false;
    private bool cancelTask = false;
    private int currentCount = 0;
    private int incrementAmount = 1;
    public int taskDurationInput = 10;
    public int taskLoopDelayInput = 100;
    [Parameter]
    public int IncrementAmount
    {
        get
        {
            return incrementAmount;
        }
        set
        {
            incrementAmount = value;
        }
    }
    private void IncrementCount()
    {
hueApiCalloff();
        currentCount = currentCount + IncrementAmount;

    }
    public async void StartTask()
    {
hueApiCallon();
        if (!isTaskRunning){
            await DoLongRunningTask();
        
           // isTaskRunning = false;
        }
         
    }


public void hueApiCallon() 
{
hueCommand(1);
} 
public void hueApiCalloff() 
{
hueCommand(0);
} 

	public void hueCommand(int turn_on = -1)
	{

		var data = "{\"alert\":\"select\"}";
		if (turn_on == 1)
		{
			data = "{\"on\":true}";
		}

		else if (turn_on == 0)
		{
			data = "{\"on\":false}";
		}
	

		var url = "https://api.meethue.com/bridge/O8y40G2KGLC9Rqo2CcQUW0yrNd8PmFtAX4cgAuy2/groups/1/action";

		var httpRequest = (HttpWebRequest)WebRequest.Create(url);
		httpRequest.Method = "PUT";

		httpRequest.Headers["Authorization"] = "Bearer kBTSVhx2hPP3iKepSzJxGdYtIm9U";
		httpRequest.ContentType = "application/json";



		using (var streamWriter = new StreamWriter(httpRequest.GetRequestStream()))
		{
			streamWriter.Write(data);
		}

		var httpResponse = (HttpWebResponse)httpRequest.GetResponse();
		using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
		{
			var result = streamReader.ReadToEnd();
		}
		return;
	}


    public void CancelTask()
    {
hueCommand();
        if (isTaskRunning)
        {
            cancelTask = true;

        isTaskRunning = false;
        }
    }
    async Task DoLongRunningTask()
    {
        isTaskRunning = true;
        await Task.Yield();
        System.Diagnostics.Debug.WriteLine("Starting long running task");
        DateTime endTime = DateTime.UtcNow.AddSeconds(taskDurationInput);
        while (DateTime.UtcNow < endTime && !cancelTask)
        {
            
            await Task.Delay(taskLoopDelayInput);
            currentCount = currentCount + IncrementAmount;
            StateHasChanged();
        }
        if (cancelTask)
        {
            System.Diagnostics.Debug.WriteLine("Task cancled!");
            cancelTask = false;
           
        }
        else
        {
            System.Diagnostics.Debug.WriteLine("Finished long running task");
        }
        
        isTaskRunning = false;
        StateHasChanged();
    }


}
