@page "/counter"

<h1 style="font-size:40px;">Counter</h1>

<p>Current count: @currentCount</p>

    <div>
    <label for="iAmount">Increment Amount:</label> 
    <input id="iAmount" @bind="incrementAmount" placeholder="@incrementAmount" />
    </div>
    <div>
    <label for="tDuration">Task Duration (s):</label>
    <input id="tDuration" @bind="taskDurationInput" placeholder="@taskDurationInput" />
    </div>
    <div>
    <label for="tDelay">Task Loop Delay (ms):</label>
    <input id="tDelay" @bind="taskLoopDelayInput" placeholder="@taskLoopDelayInput" />
    </div>

<br>
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<button class="btn btn-secondary" @onclick="StartTask">Run Task</button>
@code {
    private int currentCount = 0;
    private int incrementAmount = 1;
    public int taskDurationInput = 10;
    public int taskLoopDelayInput = 100;
    [Parameter]
    public int IncrementAmount
    {
        get
        {
            return incrementAmount;
        }
        set
        {
            incrementAmount = value;
        }
    }
    private void IncrementCount()
    {

        currentCount = currentCount + IncrementAmount;

    }
    async void StartTask()
    {
        await DoLongRunningTask();
    }
    async Task DoLongRunningTask()
    {
        await Task.Yield();
        System.Diagnostics.Debug.WriteLine("Starting long running task");
        DateTime endTime = DateTime.UtcNow.AddSeconds(taskDurationInput);
        while (DateTime.UtcNow < endTime)
        {
            StateHasChanged();
            await Task.Delay(taskLoopDelayInput);
            currentCount = currentCount + IncrementAmount;
        }
        System.Diagnostics.Debug.WriteLine("Finished long running task");
    }

}
